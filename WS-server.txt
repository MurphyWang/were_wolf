/*****************************************************************/
HTTP

1. 注册
type	0成功，1已有用户名，2通信错误
id      用户id

2. 登录
type	0成功，1用户不存在，2密码错误
id 		用户唯一标识
nick    
intro

3. 创建房间
result		0/1		0创建成功，1创建失败
number		房间号

4. 加入房间
result		0/1/2/3  0进入成功，1房间不存在，2房间已锁定，3未知错误
room_name
owner_id

5. 战绩
解析后的json字符串，[{'win':win,'lose':lose},{'role':role,'result':result,'other_person':{....}},{},...]  返回昵称

6. 修改
result 	0 成功， 1 失败

7. 获取房间列表
房间号+房间名列表 [{'id':id,'name':name},{},..]

8. 获取单个房间信息
{'room_id':room_id,'room_name':room_name,'owner_name':nick_name}


/*****************************************************************/
Websocket

对于确认消息不用返回确认消息

1. 确认消息： 用说明我收到了客户端的消息	
type = 0
user_request_id


2. 错误请求：	请求有问题，或者请求未执行成功
type = 1
room_request_id
user_id
error_message


3.	有人加入房间，给房间内所有人发通知          
type = 2
room_request_id
id_nick                房间内所有的玩家id与nickname   {'id1':nick1,'id2':nick2}


4. 选位结果  这个人选位成功还是失败
type = 3
room_request_id
user_id
seat       这个人选的座位
result     true/false 


5. 角色配置后发送分配后的角色信息
type = 4
room_request_id
list	{'id1':role1,'id2':role2,.....}



6.	房间状态改变  (角色的数量要有限制)
type = 5
room_request_id
room_state
role_alive    true 该状态对应角色存活  false 该状态对应角色死亡   这只是黑夜的，白天的默认是true
request_content      上一个状态所保留的所有消息，是一个列表，列表中每个元素都是一个请求的json字符串


7.	狼人选人
type = 6
room_request_id
id 					选票最多的人的id，并且他已经死了


8.	角色存活状态变化
type = 7
room_request_id
change	{'id1':alive1}	谁变了
list ['id1','id2',...]	谁进行的操作


9. 竞选警长人名单
type = 8
room_request_id
list {'id',..}		竞选警长名单


10. 投票结果
type = 9
room_request_id
result 				true / false 平票是false
sheriff_id 			被选中的警长id
list {'id':object_id,..}	投票人：投票对象表


11. 警徽归属
type = 10
room_request_id
list {'old_id':new_id}     原警长id:新警长id(-1代表警徽被撕了)


12. 获取房间信息(用于断线重连)
type = 11
room_request_id
result 		True/False 		重连成功或失败
list 		房间的所有信息


14. 游戏结束
type = 12
room_request_id
reason           0 狼人胜利，1 好人胜利，2 丘比特 3 房主离开


15. 离开房间
type = 13
room_request_id
user_id

16. 狼人聊天
type = 14
room_request_id
user_id
content

